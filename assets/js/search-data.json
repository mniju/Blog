{
  
    
        "post0": {
            "title": "Notes on Q learning",
            "content": "Introduction . Q learning is one of the sucessful techniques in Reinforcement Learning .It was initially introduced in 1989 by Watkins. Q learning came to light when Deepmind used it to play Atari games with superhuman perfomance in 2015. . In General,Q learning is a model free learning .Its an off policy TD Control. . In this post , We will see a small RL Introduction , then into Qlearning and end with Qlearning &amp; Sarsa Comparision. . The jupyter notebook comparision of Q learning and SARSA for the cliff walker enviornment can be found here. . Reinforcement Learning Basic Setup . . Simply , In Reinforcement Learning, the Agent acts on the Enviornment with Action and collects the Reward. The Enviornment transitions from an older state to a new state in reponse to the action by the Agent. . State Value and Action Value . Policy defines the learning agents way of behaving at a given time.A policy is a Mapping from States to probability of selecting different actions.Its denoted by π piπ. . If the agent is following policy π piπ at time t , then π(a∣s) pi(a mid s)π(a∣s) is the probability that action AtA_{t}At​ = a if state,StS_{t}St​ =s. . Reward is the goal of the RL Problem. The objective of the agent is to maximize the total rewards over time. . The State Value for a state sss under policy π piπ denoted as vπ(s)v_{ pi}(s)vπ​(s) ,is defined as the Expected return when starting in sss and following policy π piπ thereafter. . vπ(s)=Eπ[Gt∣St=s]=Eπ[∑k=0∞γkRt+k+1∣St=s]v_{ pi}(s) = mathbb{E}_{ pi} left[ G_{t} | S_{t}=s right] = mathbb{E}_{ pi} left[ sum_{k=0 }^{ infty} gamma^{k}R_{t+k+1}|S_{t}=s right]vπ​(s)=Eπ​[Gt​∣St​=s]=Eπ​[k=0∑∞​γkRt+k+1​∣St​=s] . for all s ∈ in∈ S. . The value of the state is the total amount of reward which the agent can accumulate over time. Each state s has a value v(s) . . State Value . State1 | v(s1)v(s1)v(s1) | . State2 | v(s2)v(s2)v(s2) | . State3 | v(s3)v(s3)v(s3) | . State4 | v(s4)v(s4)v(s4) | . Action value denoted as Q(s,a)Q(s,a)Q(s,a) is the expected return starting from state s, taking an action a and then following policy π piπ. . qπ(s,a)=Eπ[Gt∣St=s,At=a]=Eπ[∑k=0∞γkRt+k+1∣St=s,At=a]q_{ pi}(s,a) = mathbb{E}_{ pi} left[ G_{t} | S_{t}=s ,A_{t}=a right] = mathbb{E}_{ pi} left[ sum_{k=0 }^{ infty} gamma^{k}R_{t+k+1}|S_{t}=s ,A_{t}=a right]qπ​(s,a)=Eπ​[Gt​∣St​=s,At​=a]=Eπ​[k=0∑∞​γkRt+k+1​∣St​=s,At​=a] . We have qvalues for each state for all the possible actions . . Lets say , we have four states and each state has three possibe actions ,then Q values can be shown in the tabular form . State/Actions Action1 Action2 Action3 . State1 | Q(s1,a1)Q(s1,a1)Q(s1,a1) | Q(s1,a2)Q(s1,a2)Q(s1,a2) | Q(s1,a3)Q(s1,a3)Q(s1,a3) | . State2 | Q(s2,a1)Q(s2,a1)Q(s2,a1) | Q(s2,a2)Q(s2,a2)Q(s2,a2) | Q(s2,a3)Q(s2,a3)Q(s2,a3) | . State3 | Q(s3,a1)Q(s3,a1)Q(s3,a1) | Q(s3,a2)Q(s3,a2)Q(s3,a2) | Q(s3,a3)Q(s3,a3)Q(s3,a3) | . State4 | Q(s4,a1)Q(s4,a1)Q(s4,a1) | Q(s4,a2)Q(s4,a2)Q(s4,a2) | Q(s4,a3)Q(s4,a3)Q(s4,a3) | . As shown in the table above There is a action value QQQ for all the actions in a state unlike the Value function VVV that has a value just for each state.When the model is not available, the Q values helps to choose the next best action from that state. . Model Based Vs Model Free . Model Free means that we do not learn the model of the enviornment. We do not learn complete map of the domain. We do not learn the Probability Transition from one state to another state. P(S′∣S,a)P(S^{&amp;#x27;}| S,a)P(S′∣S,a). . Although we need a model , we need the model to generate only sample transitions, not the complete probability distributions of all possible transitions. . At the end of the learning in model free methods, we won’t have transition probabilities of the enviornment neither we know the rewards we will get without taking that action. However a policy alone is learnt based on the model(eg.Policy Gradient , Q learning) . On Policy Vs Off Policy Methods . On-Policy methods attempt to improve the policy that is used to make decisions. | Off-Policy methods evaluate or improve a policy different from the one that is used to make decisions. | . In On-Policy methods - the Policy that is being learnt and the policy that is used to explore ,move to next state are the same. . In off policy methods, two different policies are used. . Target policy - The policy that is being learned about - This will be the optimal policy. | Behaviour policy - The policy that is used to generate behaviour - This will be more exploratory to explore more actions. | Q learning is an off policy TD control as the policy we use to estimate qvalues and the policy that is used to take actions are different. . Temporal difference Learning . TD stands for Temporal difference Learning. . TD is a hybrid of both the Montecarlo and Dynamic programming. . Like MonteCarlo, its Model free.(ie) TD methods can learn directly from raw experience without a model of the enviornments dynamics. | Like Dynamic Programming , they bootstrap , meaning they update estimates based on other estimate and doesn’t wait for the END of the episode to update. | TD uses sample updates like Montecarlo | . It involves . From a state ,look ahead of the sampled sucessor state, | Compute a Backed up value, using the value of sucessor state and the reward collected along the way , | Update the value of the state accordingly | . The simplest TD method makes the update: . V(St)←V(St)+α[Rt+1+γV(St+1)−V(St)]V({S_t}) leftarrow V({S_t}) + alpha left[{R_{t+1}} + gamma V({S_{t+1}}) - V({S_t}) right]V(St​)←V(St​)+α[Rt+1​+γV(St+1​)−V(St​)] . Here V(St)V({S_t})V(St​) is the estimated value and V(St+1)V({S_{t+1}})V(St+1​) is the successor state , Rt+1{R_{t+1}}Rt+1​ is the reward collected and the computed backedup value is Rt+1+γV(St+1){R_{t+1}} + gamma V({S_{t+1}})Rt+1​+γV(St+1​) . The Error between the estimated value of StS_{t}St​ and the better estimate (Rt+1+γV(St+1)−V(St))({R_{t+1}} + gamma V({S_{t+1}}) - V({S_t}))(Rt+1​+γV(St+1​)−V(St​)) is called TD error δ deltaδ. . δt=Rt+1+γV(St+1)−V(St) delta_{t} = {R_{t+1}} + gamma V({S_{t+1}}) - V({S_t})δt​=Rt+1​+γV(St+1​)−V(St​) . More Genericially , TD Update can be written as . NewEstimate←OldEstimate+stepsize[Target−OldEstimate]NewEstimate leftarrow OldEstimate + stepsize left[ Target - OldEstimate right]NewEstimate←OldEstimate+stepsize[Target−OldEstimate] . When the model is not available we will be using Action values. (because to calculate state value, we need probability transions) . The TD(0) update for action values is : . Q(St,At)←Q(St,At)+α[Rt+1+γQ(St+1,At+1)−Q(St,At)]Q({S_t},{A_t}) leftarrow Q({S_t},{A_t}) + alpha left[{R_{t+1}} + gamma Q({S_{t+1}},{A_{t+1}}) - Q({S_t},{A_t}) right]Q(St​,At​)←Q(St​,At​)+α[Rt+1​+γQ(St+1​,At+1​)−Q(St​,At​)] . Q-Learning: . Q learning is an off policy TD Control. . The equation for Q learning is . Q(St,At)←Q(St,At)+α[Rt+1+γmaxaQ(St+1,a)−Q(St,At)]Q({S_t},{A_t}) leftarrow Q({S_t},{A_t}) + alpha left[{R_{t+1}} + gamma underset{a}{max} Q({S_{t+1}},a) - Q({S_t},{A_t}) right]Q(St​,At​)←Q(St​,At​)+α[Rt+1​+γamax​Q(St+1​,a)−Q(St​,At​)] . In Q learning ,we force the target policy Q(S,A)Q(S,A)Q(S,A) to move towards the optimal q∗q^{*}q∗ by acting greedily (maxaQ(St+1,a) underset{a}{max} Q({S_{t+1}},a)amax​Q(St+1​,a)) in that state . We dont follow that greedy action .The update is made assuming we follow the greedy behaviour.-Similiar to asking the question.. What is the estimate of Q(St,At)Q({S_t},{A_t})Q(St​,At​) if we take a greedy action at this state St+1{S_{t+1}}St+1​.We collect rewards Rt+1R_{t+1}Rt+1​ for the initial action At{A_{t}}At​ and compute the backedup action values for Q(St+1,a)Q({S_{t+1}},a)Q(St+1​,a), and use it to estimate the values at Q(St)Q({S_t})Q(St​) . Since both the policies are different , Q learning is Off policy . The Q learning Algorithm . . It should be clear from above that , for each estimate of Q at state StS_{t}St​ , Q learning uses the maximum action value of the the state St+1S_{t+1}St+1​ (Highlighted in blue).However, the next action is always derived by a different policy such as ϵ epsilonϵ-greedy (Highlighted in Green) . Q Learning Vs SARSA: . SARSA . SARSA is defined as on-policy TD Control to find optimal policy. It stands for the transition given by State,Action,Reward,(next)State,(next)Action - SARSA . The sarsa update equation is given as . Q(St,At)←Q(St,At)+α[Rt+1+γQ(St+1,At+1)−Q(St,At)]Q({S_t},{A_t}) leftarrow Q({S_t},{A_t}) + alpha left[{R_{t+1}} + gamma Q({S_{t+1}},{A_{t+1}}) - Q({S_t},{A_t}) right]Q(St​,At​)←Q(St​,At​)+α[Rt+1​+γQ(St+1​,At+1​)−Q(St​,At​)] . We use the backed up action values at next state Q(St+1,At+1)Q({S_{t+1}},{A_{t+1}})Q(St+1​,At+1​) to re-estimate the values at state Q(St,At)Q({S_t},{A_t})Q(St​,At​) . In SARSA the updates are made assuming we follow the actions defined by the policy - There is no seperate greedy policy for the updates. as in Q learning. The policy used to make the update and the one used to pick next action is the same.Thus SARSA is online. . From the state St{S_t}St​,the agent chooses At{A_t}At​ , collects a reward Rt+1{R_{t+1}}Rt+1​ , and goes to the next state St+1{S_{t+1}}St+1​. The agent chooses the next action At+1{A_{t+1}}At+1​ based on its policy .We collect the action values at Q(St+1,At+1)Q({S_{t+1}},{A_{t+1}})Q(St+1​,At+1​) and use it to estimate action values of the former state action Q(St,At)Q({S_t},{A_t})Q(St​,At​) . . The sarsa Algorithm . . In the line highlighted with Blue, the Agent chooses an action A’ from next state state S’ state using the greedy policy to update the current state S. In the final line A←A′A leftarrow A^{&amp;#x27;}A←A′ , the same action A’ selected previously (by ϵ epsilonϵ-greedy policy) for the update is used by the Agent to transition to the next state . . Case Study : Cliff Walker Enviornment . Here we shall find a case study with Cliff Walker Enviornment . Here is the jupyter notebook comparision of Q learning and SARSA for the cliff walker enviornment. . ` This is a simple implementation of the Gridworld Cliff reinforcement learning task. . Adapted from Example 6.6 (page 132) from Reinforcement Learning: An Introduction by Sutton and Barto: http://incompleteideas.net/book/RLbook2020.pdf With inspiration from: https://github.com/dennybritz/reinforcement-learning/blob/master/lib/envs/cliff_walking.py The board is a 4x12 matrix, with (using Numpy matrix indexing): [3, 0] as the start at bottom-left [3, 11] as the goal at bottom-right [3, 1..10] as the cliff at bottom-center Each time step incurs -1 reward, and stepping into the cliff incurs -100 reward and a reset to the start. An episode terminates when the agent reaches the goal.` . The enviornment is shown below . o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o S C C C C C C C C C C G . Here, . S is the only starting point. | G is the Target Goal. | C is Cliff . | Stepping into C causes Reward to be -100. | Stepping into C causes agent to restart from S | Reward is -1 on on all other transitions. | . We will run both the Q learning and Sarsa on this enviornment to compare their performances. . We could see that Q learning learns the best policy after an inital transient. . . Policy Comparision . The policy learnt by both the Q learning and SARSA can be compared. . Q-Learning Actions . &gt; &gt; &gt; &gt; &gt; &gt; &gt; v v &gt; v v &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; v &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; v S C C C C C C C C C C G . Here we can see from the starting point S, the policy goes to the immediate right and reaches the Goal. . SARSA Actions . &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; v ^ ^ ^ &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; v ^ ^ ^ ^ ^ ^ ^ ^ ^ ^ &gt; v S C C C C C C C C C C G . Here we can see , the agent goes to the top of the grid , takes a right and then reaches the Goal . . SARSA takes the longer, safer path going to the top and then moving towards the Goal. However, Q learning takes the best action and takes the path near to the cliff, the optimal path (shortest) . sarsa is an onpolicy algorithm and it cannot afford to fall the cliff every time. So it takes a much safer path. . Summary . First we saw the RL setup , some basic blocks in RL and then finally we compared Q learning with Sarsa. I just scratched the surface here.There is so much to explore in RL. I hope this will give a small boost for the beginner to dive deep to Reinforcement Learning . . Keep Learning ! Start DOING !! . Useful resources . Book:Reinforcement Learning An introduction by Sutton &amp; Barto | OnPolicy Vs Off Policy | Modelbased Vs ModelFree- from Reddit | Modelbased Vs ModelFree- from Quora | RL Intro- KD Nuggets | Q-learning Vs SARSA | Distill - Understanding TD | RL Intro -lilianweng.github.io | Good RL Series by Massimiliano |",
            "url": "https://mniju.github.io/Blog/reinforcement%20learning/2020/05/01/Qlearning-SARSA.html",
            "relUrl": "/reinforcement%20learning/2020/05/01/Qlearning-SARSA.html",
            "date": " • May 1, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mniju.github.io/Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mniju.github.io/Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mniju.github.io/Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mniju.github.io/Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}